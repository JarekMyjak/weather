{"version":3,"sources":["components/SearchField.js","components/TopAppBar.js","helpers/weatherAPI.js","components/Forecast.js","components/WeatherTile.js","components/WeatherTileGrid.js","helpers/localStorage.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","search","position","borderRadius","shape","backgroundColor","fade","marginLeft","width","breakpoints","up","spacing","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchField","props","classes","useState","citySearch","setCitySearch","className","onSubmit","e","preventDefault","handleCityAdd","InputBase","onChange","target","value","placeholder","inputProps","input","menuButton","marginRight","title","TopAppBar","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","noWrap","cityName","key","units","api","getWeatherByTown","town","fetch","then","res","json","getForecastByTown","filterEvery5thElement","element","index","Forecast","name","setname","chartData","setchartData","lookupData","setlookupData","lookupTicker","setlookupTicker","selectedDomain","setselectedDomain","zoomDomain","setzoomDomain","useEffect","data","city","list","map","x","Date","dt_txt","y","main","temp","label","forecastList","lookupDataFromForecast","filter","lookupTickerFromForecast","Paper","style","overflow","text","textAnchor","scale","containerComponent","responsive","zoomDimension","onZoomDomainChange","domain","stroke","interpolation","top","left","right","bottom","brushDimension","brushDomain","onBrushDomainChange","tickValues","tickFormat","d","time","toLocaleTimeString","hour","minute","date","toLocaleDateString","weekday","minWidth","maxWidth","flexDirection","pos","marginBottom","delete","media","WeatherTile","mainTemp","setMainTemp","description","setDescription","iconID","setIconID","apiCall","cod","onDelete","weather","icon","refresherInterval","setInterval","clearInterval","Grid","item","Card","onClick","selectTile","CardHeader","action","stopPropagation","Divider","CardContent","component","src","alt","WeatherTileGrid","cityListArr","handleCityDeleteF","selectTileF","container","direction","justify","i","id","ls","getItems","ret","JSON","parse","localStorage","getItem","setItems","setItem","stringify","App","cityList","setcityList","forecastSelect","setForecastSelect","createdAt","now","length","Container","newcityList","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f86e7fc9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade('#fff', 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade('#fff', 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '25ch',\r\n      '&:focus': {\r\n        width: '30ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport const SearchField = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const [citySearch, setCitySearch] = useState('')\r\n\r\n    const handleCitySearchInput = (e) => {\r\n      setCitySearch(e.target.value)\r\n    }\r\n\r\n    const handleCityAdd = (e) => {\r\n      e.preventDefault()\r\n      props.handleCityAdd(citySearch)\r\n      setCitySearch('')\r\n  }\r\n\r\n    return (\r\n        <form className={classes.search} onSubmit={handleCityAdd}>\r\n            <SearchIcon className={classes.searchIcon}/>\r\n            <InputBase\r\n              onChange = {handleCitySearchInput}\r\n              value = {citySearch}\r\n              placeholder=\"Search by city…\"\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              \r\n            />\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { SearchField } from \"./SearchField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function TopAppBar( props) {\r\n  const classes = useStyles();\r\n\r\n  const handleCityAdd = (cityName) => {\r\n    props.handleCityAdd(cityName)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Weather wherever\r\n          </Typography>\r\n\r\n          <SearchField handleCityAdd={handleCityAdd}/>\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","const key = '&appid=' + process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY\r\nconst apiBaseUrl = 'https://api.openweathermap.org/data/2.5/weather?q='\r\nconst forecastBaseUrl = 'https://api.openweathermap.org/data/2.5/forecast?q='\r\nconst units = '&units=metric'\r\nconst forecastCount = '&cnt='+40\r\n\r\nconst api = {\r\n    getWeatherByTown: (town) => {\r\n            return fetch(apiBaseUrl+town+key+units)\r\n                .then(res => res.json())\r\n    },\r\n    getForecastByTown: (town) => {\r\n        return fetch(forecastBaseUrl+town+key+units+forecastCount)\r\n                .then(res => res.json())\r\n    }\r\n}\r\n\r\nexport default api\r\n","import React, { useState, useEffect } from 'react'\r\nimport api from '../helpers/weatherAPI'\r\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryLabel, VictoryZoomContainer, VictoryBrushContainer } from 'victory';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst chartDataFromForecast = (forecastList) => {\r\n    return forecastList.map((element, index) => {\r\n        return {\r\n            x: new Date(element.dt_txt),\r\n            y: element.main.temp,\r\n            label: element.main.temp + '°C',\r\n        }\r\n    })\r\n}\r\n\r\nconst lookupDataFromForecast = (forecastList) => {\r\n    return forecastList.map((element, index) => {\r\n        return {\r\n            x: new Date(element.dt_txt),\r\n            y: element.main.temp,\r\n        }\r\n    })\r\n}\r\n\r\nconst filterEvery5thElement = (element, index) => index % 5 === 0\r\n\r\nconst lookupTickerFromForecast = (forecastList) => {\r\n    let ret = forecastList.map((element, index) => {\r\n        return new Date(element.dt_txt)\r\n    })\r\n    return ret.filter(filterEvery5thElement)\r\n}\r\n\r\n\r\nconst Forecast = (props) => {\r\n\r\n    const [name, setname] = useState('')\r\n    const [chartData, setchartData] = useState([])\r\n    const [lookupData, setlookupData] = useState([])\r\n    const [lookupTicker, setlookupTicker] = useState([])\r\n    //lookupData.map((e)=>{e.x})\r\n    const [selectedDomain, setselectedDomain] = useState()\r\n    const [zoomDomain, setzoomDomain] = useState()\r\n\r\n    const handleZoom = (domain) => {\r\n        setselectedDomain(domain);\r\n    }\r\n\r\n    const handleBrush = (domain) => {\r\n        setzoomDomain(domain)\r\n    }\r\n\r\n    useEffect(() => {\r\n        api.getForecastByTown(props.cityName)\r\n            .then(data => {\r\n                setname(data.city.name)\r\n                setchartData(chartDataFromForecast(data.list))\r\n                setlookupData(lookupDataFromForecast(data.list))\r\n                setlookupTicker(lookupTickerFromForecast(data.list))\r\n            })\r\n    }, [props.cityName])\r\n\r\n    return (\r\n        <Paper style={{ padding: \"0px 20px 0px 20px\" }}>\r\n            <div style={{ overflow: \"hidden\" }}>\r\n                <VictoryLabel text={name} x={225} y={60} textAnchor=\"middle\" />\r\n                <VictoryChart\r\n                    width={1000}\r\n                    height={300}\r\n                    scale={{ x: \"time\" }}\r\n                    containerComponent={\r\n                        <VictoryZoomContainer responsive={true}\r\n                            zoomDimension=\"x\"\r\n                            zoomDomain={zoomDomain}\r\n                            onZoomDomainChange={handleZoom}\r\n                        />\r\n                    }\r\n                    \r\n                >\r\n                    <VictoryLine\r\n                        style={{\r\n                            data: { stroke: \"lightblue\" }\r\n                        }}\r\n                        data={chartData}\r\n                        interpolation=\"cardinal\"\r\n                       \r\n                    />\r\n\r\n                </VictoryChart>\r\n\r\n                <VictoryChart\r\n                    width={1000}\r\n                    height={90}\r\n                    scale={{ x: \"time\" }}\r\n                    padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\r\n                    containerComponent={\r\n                        <VictoryBrushContainer responsive={true}\r\n                            brushDimension=\"x\"\r\n                            brushDomain={selectedDomain}\r\n                            onBrushDomainChange={handleBrush}\r\n                        />\r\n                    }\r\n                >\r\n                    <VictoryAxis\r\n                        tickValues={lookupTicker}\r\n                        tickFormat={(x) => {\r\n                            let d = new Date(x)\r\n\r\n                            const time = d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n                            const date = d.toLocaleDateString([], { weekday: 'long' })\r\n                            return `${date}\\n${time}`\r\n                        }}\r\n                    />\r\n                    <VictoryLine\r\n                        style={{\r\n                            data: { stroke: \"lightblue\" }\r\n                        }}\r\n                        data={lookupData}\r\n                        interpolation=\"cardinal\"\r\n                    />\r\n                </VictoryChart>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Forecast\r\n","import React, { useState, useEffect } from 'react';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { IconButton, CardHeader, Divider } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport api from '../helpers/weatherAPI'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        maxWidth: 400,\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    delete: {\r\n        marginLeft: \"auto\",\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n\r\n\r\n});\r\n\r\nexport function WeatherTile(props) {\r\n    const classes = useStyles();\r\n\r\n    const [name, setname] = useState('');\r\n    const [mainTemp, setMainTemp] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [iconID, setIconID] = useState('');\r\n\r\n    const apiCall = () => {\r\n        api.getWeatherByTown(props.cityName)\r\n            .then(data => {\r\n                if (data.cod === \"404\") {\r\n                    props.onDelete()\r\n                } else {\r\n                    setname(data.name)\r\n                    setMainTemp(data.main.temp)\r\n                    setDescription(data.weather[0].description)\r\n                    setIconID(data.weather[0].icon)\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        apiCall()\r\n        const refresherInterval = setInterval(() => {\r\n            apiCall()\r\n        }, 2 * 60 * 1000);\r\n        return () => clearInterval(refresherInterval)\r\n    })\r\n\r\n    const deleteHandler = (e) => {\r\n        e.stopPropagation()\r\n        props.onDelete()\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        props.selectTile()\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid item >\r\n            <Card className={classes.root} onClick={clickHandler}>\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton aria-label=\"delete\" className={classes.delete} onClick={deleteHandler}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={name}\r\n                />\r\n                <Divider />\r\n                <CardContent  >\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        {description}\r\n                    </Typography>\r\n                    {iconID ?\r\n                        <img src={`http://openweathermap.org/img/wn/${iconID}.png`} alt={`${description} icon`} />\r\n                        : <br />\r\n                    }\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        {mainTemp}°C\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n            </Card>\r\n        </Grid >\r\n\r\n    );\r\n}","import React from 'react'\r\nimport { Grid } from '@material-ui/core';\r\nimport { WeatherTile } from \"./WeatherTile\";\r\n\r\nconst WeatherTileGrid = ({cityListArr, handleCityDeleteF, selectTileF}) => {\r\n    return (\r\n        <Grid container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={3}\r\n        >\r\n          {cityListArr.map((i) => {\r\n            return (<WeatherTile key={i.id} cityName={i.name} onDelete={() => handleCityDeleteF(i.id)} selectTile={() => selectTileF(i.name)}/>)\r\n          })}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default WeatherTileGrid\r\n","const key = 'WeatherApp'\r\n\r\nconst ls = {\r\n    getItems: () => {\r\n        const ret = JSON.parse(localStorage.getItem(key))\r\n        return ret != null ? ret : []\r\n    },\r\n\r\n    setItems: (item) => {\r\n        return localStorage.setItem(key, JSON.stringify(item));\r\n    },\r\n}\r\n\r\nexport default ls\r\n","import './App.css';\nimport 'fontsource-roboto';\nimport TopAppBar from './components/TopAppBar';\nimport { Container, Divider } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport Forecast from \"./components/Forecast\"\nimport WeatherTileGrid from './components/WeatherTileGrid';\nimport ls from \"./helpers/localStorage\";\n\n\nfunction App() {\n\n  const [cityList, setcityList] = useState([])\n  const [forecastSelect, setForecastSelect] = useState()\n\n  useEffect(() => {\n    setcityList(ls.getItems())\n    return () => {\n\n    }\n  }, [])\n\n  const handleCityAdd = (cityName) => {\n    if (cityName !== '') {\n      const city = {}\n      city.name = cityName\n      city.createdAt = Date.now()\n      city.id = cityList.length\n      setcityList([...cityList, city])\n      ls.setItems([...cityList, city])\n    }\n  }\n\n  const handleCityDelete = (id) => {\n    const newcityList = cityList.filter((element) => {\n      return element.id !== id\n    }, id)\n    setcityList(newcityList)\n    ls.setItems(newcityList)\n  }\n\n  const selectTile = (name) => {\n    setForecastSelect(name)\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <TopAppBar handleCityAdd={handleCityAdd} />\n      <Container>\n        <br/>\n        <WeatherTileGrid cityListArr={cityList}  handleCityDeleteF={handleCityDelete} selectTileF={selectTile}/>\n        <br/>\n        <Divider/>\n        <br/>\n        {forecastSelect ? <Forecast cityName={forecastSelect}/> : <p>click on any tlile to watch the forecast</p>}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n\nrequire('dotenv').config()\n\n\nReactDOM.render( \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}